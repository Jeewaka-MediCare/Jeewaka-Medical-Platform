// Doctor Earnings HTML Template Generator
import { PDF_BRAND_THEME } from "../constants/pdfBrandTheme";
import { PDFFormatUtils } from "../utils/pdfFormatUtils";

export class DoctorEarningsTemplate {
  /**
   * Generate HTML content for doctor earnings report
   * @param {Array} sessions - Array of session/earning objects
   * @param {Object} stats - Earnings statistics
   * @param {Object} doctor - Doctor information
   * @param {Object} filters - Applied filters
   * @returns {string} Complete HTML content
   */
  static generate(sessions, stats, doctor, filters) {
    const currentDate = PDFFormatUtils.getCurrentDateTime();
    const sessionsTableRows = this._generateSessionRows(sessions);
    const filterSection = this._generateFilterSection(filters);
    const statsSection = this._generateStatsSection(stats, sessions);

    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>Doctor Earnings Report</title>
        <style>
          ${this._getStyles()}
        </style>
      </head>
      <body>
        <div class="header">
          <h1>Jeewaka Medical Platform</h1>
          <p style="margin: 5px 0 0 0;">Doctor Earnings Report</p>
        </div>
        
        <div class="content">
          <div class="info-section">
            <p><strong>Doctor:</strong> ${doctor?.name || "Unknown Doctor"}</p>
            <p><strong>Specialization:</strong> ${
              doctor?.specialization || "General"
            }</p>
            <p><strong>Generated on:</strong> ${currentDate}</p>
            ${filterSection}
          </div>

          ${statsSection}

          <div class="info-section">
            <h2>Session Details</h2>
            <table>
              <thead>
                <tr>
                  <th>Patient Name</th>
                  <th>Payment ID</th>
                  <th>Amount Earned</th>
                  <th>Appointment Date</th>
                  <th>Appointment Time</th>
                  <th>Payment Received</th>
                </tr>
              </thead>
              <tbody>
                ${sessionsTableRows}
              </tbody>
            </table>
          </div>
        </div>

        <div class="footer">
          <p>This document was generated by Jeewaka Medical Platform</p>
          <p>Â© ${new Date().getFullYear()} Jeewaka Medical Platform. All rights reserved.</p>
        </div>
      </body>
      </html>
    `;
  }

  /**
   * Generate session table rows
   * @param {Array} sessions - Array of session objects
   * @returns {string} HTML table rows
   */
  static _generateSessionRows(sessions) {
    return sessions
      .map((session) => {
        // Patient name
        const patientName =
          session.patientName || session.patient?.name || "Unknown Patient";

        // Payment ID - this should be the main identifier
        const paymentId = session.paymentId || session.id || "N/A";

        // Format earnings - use direct amount formatting (not cents)
        const earningAmount =
          session.amount || session.earning || session.fee || 0;
        const formattedEarning = `LKR ${earningAmount.toFixed(2)}`;

        // Format appointment date
        const appointmentDate =
          session.appointmentDate || session.date || session.created;
        const formattedAppointmentDate =
          PDFFormatUtils.formatDate(appointmentDate);

        // Format appointment time
        const appointmentTime =
          session.appointmentTime || session.time || "N/A";

        // Format payment received date and time
        const paymentDate =
          session.paidDate || session.paymentDate || session.created;
        const formattedPaymentDate = PDFFormatUtils.formatDate(paymentDate);
        const formattedPaymentTime = PDFFormatUtils.formatTime(paymentDate);
        const paymentReceived = `${formattedPaymentDate} ${formattedPaymentTime}`;

        return `
          <tr>
            <td style="padding: 8px; border-bottom: 1px solid ${PDF_BRAND_THEME.borderColor};">
              ${patientName}
            </td>
            <td style="padding: 8px; border-bottom: 1px solid ${PDF_BRAND_THEME.borderColor};">
              ${paymentId}
            </td>
            <td style="padding: 8px; border-bottom: 1px solid ${PDF_BRAND_THEME.borderColor};">
              ${formattedEarning}
            </td>
            <td style="padding: 8px; border-bottom: 1px solid ${PDF_BRAND_THEME.borderColor};">
              ${formattedAppointmentDate}
            </td>
            <td style="padding: 8px; border-bottom: 1px solid ${PDF_BRAND_THEME.borderColor};">
              ${appointmentTime}
            </td>
            <td style="padding: 8px; border-bottom: 1px solid ${PDF_BRAND_THEME.borderColor};">
              ${paymentReceived}
            </td>
          </tr>
        `;
      })
      .join("");
  }

  /**
   * Generate filter section if filters are applied
   * @param {Object} filters - Applied filters
   * @returns {string} HTML filter section
   */
  static _generateFilterSection(filters) {
    if (!filters.dateRange && !filters.status) {
      return "";
    }

    return `
      <p><strong>Applied Filters:</strong></p>
      <ul>
        ${filters.dateRange ? `<li>Date Range: ${filters.dateRange}</li>` : ""}
        ${
          filters.status
            ? `<li>Status: ${
                filters.status.charAt(0).toUpperCase() + filters.status.slice(1)
              }</li>`
            : ""
        }
      </ul>
    `;
  }

  /**
   * Generate statistics section
   * @param {Object} stats - Earnings statistics
   * @param {Array} sessions - Sessions data for calculation
   * @returns {string} HTML stats section
   */
  static _generateStatsSection(stats, sessions = []) {
    // Calculate stats from sessions if not provided or if stats seem incorrect
    const calculatedStats = this._calculateStatsFromSessions(sessions);

    // Use provided stats or calculated stats as fallback
    const totalSessions = stats.totalSessions || calculatedStats.totalSessions;
    const completedSessions =
      stats.completedSessions || calculatedStats.completedSessions;
    const pendingSessions =
      stats.pendingSessions || calculatedStats.pendingSessions;
    const cancelledSessions =
      stats.cancelledSessions || calculatedStats.cancelledSessions;
    const totalEarnings = stats.totalEarnings || calculatedStats.totalEarnings;
    const averageEarning =
      totalSessions > 0 ? totalEarnings / totalSessions : 0;

    return `
      <div class="info-section">
        <h2>Earnings Summary</h2>
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-number">${totalSessions}</div>
            <div class="stat-label">Total Sessions</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">${completedSessions}</div>
            <div class="stat-label">Completed</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">${pendingSessions}</div>
            <div class="stat-label">Pending</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">${cancelledSessions}</div>
            <div class="stat-label">Cancelled</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">LKR ${totalEarnings.toFixed(2)}</div>
            <div class="stat-label">Total Earnings</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">LKR ${averageEarning.toFixed(2)}</div>
            <div class="stat-label">Average per Session</div>
          </div>
        </div>
      </div>
    `;
  }

  /**
   * Calculate statistics from sessions data
   * @param {Array} sessions - Sessions array
   * @returns {Object} Calculated statistics
   */
  static _calculateStatsFromSessions(sessions) {
    if (!Array.isArray(sessions)) {
      return {
        totalSessions: 0,
        completedSessions: 0,
        pendingSessions: 0,
        cancelledSessions: 0,
        totalEarnings: 0,
      };
    }

    let totalEarnings = 0;
    let completedSessions = 0;
    let pendingSessions = 0;
    let cancelledSessions = 0;

    sessions.forEach((session) => {
      const amount = session.amount || session.earning || session.fee || 0;
      // Use direct amount (no cents conversion)
      totalEarnings += amount;

      const status = (session.status || "").toLowerCase();
      if (status === "completed" || status === "succeeded") {
        completedSessions++;
      } else if (status === "pending") {
        pendingSessions++;
      } else if (status === "cancelled" || status === "failed") {
        cancelledSessions++;
      } else {
        // Default to completed if status is unclear
        completedSessions++;
      }
    });

    return {
      totalSessions: sessions.length,
      completedSessions,
      pendingSessions,
      cancelledSessions,
      totalEarnings,
    };
  }

  /**
   * Get CSS styles for doctor earnings template
   * @returns {string} CSS styles
   */
  static _getStyles() {
    return `
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        color: ${PDF_BRAND_THEME.darkTextColor};
      }
      .header {
        background: ${PDF_BRAND_THEME.brandColor};
        color: white;
        padding: 20px;
        text-align: center;
      }
      .header h1 {
        margin: 0;
        font-size: 24px;
      }
      .content {
        padding: 20px;
      }
      .info-section {
        margin-bottom: 30px;
      }
      .info-section h2 {
        color: ${PDF_BRAND_THEME.darkTextColor};
        border-bottom: 2px solid ${PDF_BRAND_THEME.accentColor};
        padding-bottom: 5px;
      }
      .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 15px;
        margin-bottom: 30px;
      }
      .stat-card {
        text-align: center;
        padding: 15px;
        background: ${PDF_BRAND_THEME.lightBrandColor};
        border-radius: 8px;
      }
      .stat-number {
        font-size: 20px;
        font-weight: bold;
        color: ${PDF_BRAND_THEME.brandColor};
      }
      .stat-label {
        font-size: 12px;
        color: ${PDF_BRAND_THEME.mutedTextColor};
        margin-top: 5px;
      }
      table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
      }
      th {
        background: ${PDF_BRAND_THEME.brandColor};
        color: white;
        padding: 12px 8px;
        text-align: left;
        font-weight: bold;
        font-size: 14px;
      }
      td {
        padding: 8px;
        border-bottom: 1px solid ${PDF_BRAND_THEME.borderColor};
        font-size: 13px;
      }
      .footer {
        margin-top: 40px;
        text-align: center;
        color: ${PDF_BRAND_THEME.mutedTextColor};
        font-size: 12px;
        border-top: 1px solid ${PDF_BRAND_THEME.borderColor};
        padding-top: 20px;
      }
    `;
  }
}

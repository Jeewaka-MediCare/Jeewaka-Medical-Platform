// Payment Receipt HTML Template Generator
import { PDF_BRAND_THEME } from "../constants/pdfBrandTheme";
import { PDFFormatUtils, PDFStatusUtils } from "../utils/pdfFormatUtils";

export class PaymentReceiptTemplate {
  /**
   * Generate HTML content for payment receipt
   * @param {Object} payment - Payment object
   * @param {Object} user - User information
   * @param {Object} doctor - Doctor information (optional, will use payment.doctor if not provided)
   * @param {Object} session - Session information (optional)
   * @returns {string} Complete HTML content
   */
  static generate(payment, user, doctor = null, session = null) {
    const currentDate = PDFFormatUtils.getCurrentDateTime();
    const receiptNumber = this._generateReceiptNumber(payment);

    // Extract doctor information from payment if not provided separately
    const doctorInfo = doctor || {
      name: payment.doctorName || payment.doctor?.name || "Unknown Doctor",
      specialization:
        payment.doctorSpecialization ||
        payment.doctor?.specialization ||
        "General Medicine",
      email: payment.doctor?.email || null,
      hospitalName: payment.hospital?.name || payment.hospitalName || null,
    };

    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>Payment Receipt</title>
        <style>
          ${this._getStyles()}
        </style>
      </head>
      <body>
        <div class="header">
          <h1>Jeewaka Medical Platform</h1>
          <p style="margin: 5px 0 0 0;">Payment Receipt</p>
        </div>
        
        <div class="content">
          ${this._generateReceiptHeader(receiptNumber, currentDate)}
          ${this._generateBillingInfo(user, doctorInfo)}
          ${this._generatePaymentDetails(payment, session)}
          ${this._generatePaymentSummary(payment)}
          ${this._generateFooterNotes()}
        </div>

        <div class="footer">
          <p>This document was generated by Jeewaka Medical Platform</p>
          <p>Â© ${new Date().getFullYear()} Jeewaka Medical Platform. All rights reserved.</p>
          <p style="font-size: 10px; margin-top: 10px;">
            For any queries regarding this receipt, please contact our support team.
          </p>
        </div>
      </body>
      </html>
    `;
  }

  /**
   * Generate receipt number from payment data
   * @param {Object} payment - Payment object
   * @returns {string} Receipt number
   */
  static _generateReceiptNumber(payment) {
    const paymentId = payment.id || payment.paymentId || payment.transactionId;
    const date = new Date(payment.date || payment.created || Date.now());
    const dateStr = date.toISOString().slice(0, 10).replace(/-/g, "");

    if (paymentId) {
      return `JMP-${dateStr}-${paymentId.slice(-6)}`;
    }
    return `JMP-${dateStr}-${Math.random()
      .toString(36)
      .substr(2, 6)
      .toUpperCase()}`;
  }

  /**
   * Generate receipt header section
   * @param {string} receiptNumber - Receipt number
   * @param {string} currentDate - Current date
   * @returns {string} HTML receipt header
   */
  static _generateReceiptHeader(receiptNumber, currentDate) {
    return `
      <div class="receipt-header">
        <div class="receipt-info">
          <h2>Payment Receipt</h2>
          <div class="receipt-details">
            <div class="receipt-item">
              <span class="label">Receipt No:</span>
              <span class="value">${receiptNumber}</span>
            </div>
            <div class="receipt-item">
              <span class="label">Generated:</span>
              <span class="value">${currentDate}</span>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  /**
   * Generate billing information section
   * @param {Object} user - User information
   * @param {Object} doctor - Doctor information
   * @returns {string} HTML billing info
   */
  static _generateBillingInfo(user, doctor) {
    return `
      <div class="billing-section">
        <div class="billing-from">
          <h3>From</h3>
          <div class="billing-details">
            <strong>Jeewaka Medical Platform</strong><br>
            Digital Healthcare Services<br>
            Sri Lanka<br>
            Email: support@jeewaka.lk
          </div>
        </div>
        
        <div class="billing-to">
          <h3>To</h3>
          <div class="billing-details">
            <strong>${user?.name || user?.email || "Patient"}</strong><br>
            ${user?.email ? `Email: ${user.email}<br>` : ""}
            ${user?.phone ? `Phone: ${user.phone}<br>` : ""}
          </div>
        </div>
        
        <div class="service-provider">
          <h3>Service Provider</h3>
          <div class="billing-details">
            <strong>Dr. ${doctor?.name || "Unknown Doctor"}</strong><br>
            ${doctor?.specialization || "General Medicine"}<br>
            ${doctor?.hospitalName ? `${doctor.hospitalName}<br>` : ""}
            ${doctor?.email ? `Email: ${doctor.email}` : ""}
          </div>
        </div>
      </div>
    `;
  }

  /**
   * Generate payment details section
   * @param {Object} payment - Payment object
   * @param {Object} session - Session information
   * @returns {string} HTML payment details
   */
  static _generatePaymentDetails(payment, session) {
    const paymentDate = PDFFormatUtils.formatDate(
      payment.date || payment.created
    );
    const paymentTime = PDFFormatUtils.formatTime(
      payment.date || payment.created
    );
    const sessionInfo = session ? this._getSessionInfo(session) : null;
    const appointmentInfo = this._getAppointmentInfo(payment);

    return `
      <div class="payment-details">
        <h3>Payment Details</h3>
        <table class="details-table">
          <tr>
            <td class="label-col">Service:</td>
            <td>Medical Consultation${
              session ? ` - ${session.type || "Online"}` : ""
            }</td>
          </tr>
          <tr>
            <td class="label-col">Payment Date:</td>
            <td>${paymentDate}</td>
          </tr>
          <tr>
            <td class="label-col">Payment Time:</td>
            <td>${paymentTime}</td>
          </tr>
          <tr>
            <td class="label-col">Payment Method:</td>
            <td>${
              payment.paymentMethod || payment.method || "Card Payment"
            }</td>
          </tr>
          <tr>
            <td class="label-col">Transaction ID:</td>
            <td>${payment.transactionId || payment.id || "N/A"}</td>
          </tr>
          <tr>
            <td class="label-col">Status:</td>
            <td>
              <span class="status-badge" style="background: ${PDFStatusUtils.getStatusBackgroundColor(
                payment.status
              )}; color: ${PDFStatusUtils.getStatusTextColor(payment.status)};">
                ${
                  (payment.status || "Unknown").charAt(0).toUpperCase() +
                  (payment.status || "Unknown").slice(1)
                }
              </span>
            </td>
          </tr>
          ${appointmentInfo ? appointmentInfo : ""}
          ${sessionInfo ? sessionInfo : ""}
        </table>
      </div>
    `;
  }

  /**
   * Get session information rows
   * @param {Object} session - Session object
   * @returns {string} HTML session info rows
   */
  static _getSessionInfo(session) {
    if (!session) return "";

    let sessionRows = "";

    if (session.date || session.startTime) {
      const sessionDate = PDFFormatUtils.formatDate(
        session.date || session.startTime
      );
      sessionRows += `
        <tr>
          <td class="label-col">Session Date:</td>
          <td>${sessionDate}</td>
        </tr>
      `;
    }

    if (session.startTime && session.endTime) {
      const startTime = PDFFormatUtils.formatTime(session.startTime);
      const endTime = PDFFormatUtils.formatTime(session.endTime);
      sessionRows += `
        <tr>
          <td class="label-col">Session Time:</td>
          <td>${startTime} - ${endTime}</td>
        </tr>
      `;
    }

    if (session.duration) {
      sessionRows += `
        <tr>
          <td class="label-col">Duration:</td>
          <td>${session.duration}</td>
        </tr>
      `;
    }

    return sessionRows;
  }

  /**
   * Get appointment information rows from payment object
   * @param {Object} payment - Payment object containing appointment details
   * @returns {string} HTML appointment info rows
   */
  static _getAppointmentInfo(payment) {
    if (
      !payment.appointmentDate &&
      !payment.appointmentTime &&
      !payment.appointment
    )
      return "";

    let appointmentRows = "";

    // Add appointment date
    if (payment.appointmentDate || payment.appointment?.date) {
      const appointmentDate = PDFFormatUtils.formatDate(
        payment.appointmentDate || payment.appointment?.date
      );
      appointmentRows += `
        <tr>
          <td class="label-col">Appointment Date:</td>
          <td>${appointmentDate}</td>
        </tr>
      `;
    }

    // Add appointment time
    if (payment.appointmentTime || payment.appointment?.time) {
      const appointmentTime =
        payment.appointmentTime || payment.appointment?.time;
      appointmentRows += `
        <tr>
          <td class="label-col">Appointment Time:</td>
          <td>${appointmentTime}</td>
        </tr>
      `;
    }

    // Add appointment status
    if (payment.appointmentStatus || payment.appointment?.status) {
      const appointmentStatus =
        payment.appointmentStatus || payment.appointment?.status;
      appointmentRows += `
        <tr>
          <td class="label-col">Appointment Status:</td>
          <td>
            <span style="padding: 2px 8px; border-radius: 4px; font-size: 12px; background: #10B981; color: white;">
              ${
                appointmentStatus.charAt(0).toUpperCase() +
                appointmentStatus.slice(1)
              }
            </span>
          </td>
        </tr>
      `;
    }

    return appointmentRows;
  }

  /**
   * Generate payment summary section
   * @param {Object} payment - Payment object
   * @returns {string} HTML payment summary
   */
  static _generatePaymentSummary(payment) {
    // Backend sends amount in cents, so divide by 100 for display
    const subtotal = (payment.amount || 0) / 100;
    const tax = (payment.tax || 0) / 100;
    const discount = (payment.discount || 0) / 100;
    const total = subtotal + tax - discount;

    const formatCurrencyAmount = (amount) => `LKR ${amount.toFixed(2)}`;

    return `
      <div class="payment-summary">
        <h3>Payment Summary</h3>
        <table class="summary-table">
          <tr>
            <td>Consultation Fee:</td>
            <td class="amount">${formatCurrencyAmount(subtotal)}</td>
          </tr>
          ${
            tax > 0
              ? `
            <tr>
              <td>Tax:</td>
              <td class="amount">${formatCurrencyAmount(tax)}</td>
            </tr>
          `
              : ""
          }
          ${
            discount > 0
              ? `
            <tr>
              <td>Discount:</td>
              <td class="amount">-${formatCurrencyAmount(discount)}</td>
            </tr>
          `
              : ""
          }
          <tr class="total-row">
            <td><strong>Total Amount:</strong></td>
            <td class="amount"><strong>${formatCurrencyAmount(
              total
            )}</strong></td>
          </tr>
        </table>
      </div>
    `;
  }

  /**
   * Generate footer notes section
   * @returns {string} HTML footer notes
   */
  static _generateFooterNotes() {
    return `
      <div class="notes-section">
        <h4>Important Notes:</h4>
        <ul>
          <li>This receipt is valid for insurance and tax purposes.</li>
          <li>Please keep this receipt for your records.</li>
          <li>Refunds, if applicable, will be processed within 5-7 business days.</li>
          <li>For any billing inquiries, please contact our support team with your receipt number.</li>
        </ul>
      </div>
    `;
  }

  /**
   * Get CSS styles for payment receipt template
   * @returns {string} CSS styles
   */
  static _getStyles() {
    return `
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        color: ${PDF_BRAND_THEME.darkTextColor};
        line-height: 1.4;
      }
      .header {
        background: ${PDF_BRAND_THEME.brandColor};
        color: white;
        padding: 20px;
        text-align: center;
      }
      .header h1 {
        margin: 0;
        font-size: 24px;
      }
      .content {
        padding: 20px;
        max-width: 800px;
        margin: 0 auto;
      }
      .receipt-header {
        background: ${PDF_BRAND_THEME.lightBrandColor};
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 25px;
      }
      .receipt-header h2 {
        margin: 0 0 15px 0;
        color: ${PDF_BRAND_THEME.brandColor};
      }
      .receipt-details {
        display: flex;
        gap: 30px;
      }
      .receipt-item {
        display: flex;
        flex-direction: column;
      }
      .label {
        font-size: 12px;
        color: ${PDF_BRAND_THEME.mutedTextColor};
        margin-bottom: 2px;
      }
      .value {
        font-weight: bold;
        color: ${PDF_BRAND_THEME.darkTextColor};
      }
      .billing-section {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        gap: 20px;
        margin-bottom: 30px;
      }
      .billing-section h3 {
        margin: 0 0 10px 0;
        color: ${PDF_BRAND_THEME.brandColor};
        font-size: 16px;
        border-bottom: 1px solid ${PDF_BRAND_THEME.borderColor};
        padding-bottom: 5px;
      }
      .billing-details {
        font-size: 14px;
        line-height: 1.5;
      }
      .payment-details {
        margin-bottom: 30px;
      }
      .payment-details h3 {
        margin: 0 0 15px 0;
        color: ${PDF_BRAND_THEME.brandColor};
        border-bottom: 2px solid ${PDF_BRAND_THEME.accentColor};
        padding-bottom: 5px;
      }
      .details-table {
        width: 100%;
        border-collapse: collapse;
      }
      .details-table td {
        padding: 8px 0;
        border-bottom: 1px solid ${PDF_BRAND_THEME.borderColor};
      }
      .label-col {
        width: 150px;
        font-weight: bold;
        color: ${PDF_BRAND_THEME.mutedTextColor};
      }
      .status-badge {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: bold;
      }
      .payment-summary {
        background: ${PDF_BRAND_THEME.lightBrandColor};
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 25px;
      }
      .payment-summary h3 {
        margin: 0 0 15px 0;
        color: ${PDF_BRAND_THEME.brandColor};
      }
      .summary-table {
        width: 100%;
        border-collapse: collapse;
      }
      .summary-table td {
        padding: 8px 0;
      }
      .amount {
        text-align: right;
        font-weight: bold;
      }
      .total-row {
        border-top: 2px solid ${PDF_BRAND_THEME.brandColor};
        border-bottom: 2px solid ${PDF_BRAND_THEME.brandColor};
      }
      .total-row td {
        padding: 12px 0;
        font-size: 16px;
        color: ${PDF_BRAND_THEME.brandColor};
      }
      .notes-section {
        margin-top: 30px;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 6px;
      }
      .notes-section h4 {
        margin: 0 0 10px 0;
        color: ${PDF_BRAND_THEME.darkTextColor};
      }
      .notes-section ul {
        margin: 0;
        padding-left: 20px;
      }
      .notes-section li {
        margin-bottom: 5px;
        font-size: 13px;
        color: ${PDF_BRAND_THEME.mutedTextColor};
      }
      .footer {
        margin-top: 40px;
        text-align: center;
        color: ${PDF_BRAND_THEME.mutedTextColor};
        font-size: 12px;
        border-top: 1px solid ${PDF_BRAND_THEME.borderColor};
        padding-top: 20px;
      }
    `;
  }
}

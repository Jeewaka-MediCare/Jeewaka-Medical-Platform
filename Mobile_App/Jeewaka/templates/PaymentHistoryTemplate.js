// Payment History HTML Template Generator
import { PDF_BRAND_THEME } from "../constants/pdfBrandTheme";
import { PDFFormatUtils, PDFStatusUtils } from "../utils/pdfFormatUtils";

export class PaymentHistoryTemplate {
  /**
   * Generate HTML content for payment history report
   * @param {Array} payments - Array of payment objects
   * @param {Object} stats - Payment statistics
   * @param {Object} user - User information
   * @param {Object} filters - Applied filters
   * @returns {string} Complete HTML content
   */
  static generate(payments, stats, user, filters) {
    const currentDate = PDFFormatUtils.getCurrentDateTime();
    const paymentsTableRows = this._generatePaymentRows(payments);
    const filterSection = this._generateFilterSection(filters);
    const statsSection = this._generateStatsSection(stats);

    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>Payment History Report</title>
        <style>
          ${this._getStyles()}
        </style>
      </head>
      <body>
        <div class="header">
          <h1>Jeewaka Medical Platform</h1>
          <p style="margin: 5px 0 0 0;">Payment History Report</p>
        </div>
        
        <div class="content">
          <div class="info-section">
            <p><strong>Generated for:</strong> ${
              user?.name || user?.email || "Patient"
            }</p>
            <p><strong>Generated on:</strong> ${currentDate}</p>
            ${filterSection}
          </div>

          ${statsSection}

          <div class="info-section">
            <h2>Payment Details</h2>
            <table>
              <thead>
                <tr>
                  <th>Doctor</th>
                  <th>Specialization</th>
                  <th>Amount</th>
                  <th>Status</th>
                  <th>Date</th>
                  <th>Payment ID</th>
                </tr>
              </thead>
              <tbody>
                ${paymentsTableRows}
              </tbody>
            </table>
          </div>
        </div>

        <div class="footer">
          <p>This document was generated by Jeewaka Medical Platform</p>
          <p>Â© ${new Date().getFullYear()} Jeewaka Medical Platform. All rights reserved.</p>
        </div>
      </body>
      </html>
    `;
  }

  /**
   * Generate payment table rows
   * @param {Array} payments - Array of payment objects
   * @returns {string} HTML table rows
   */
  static _generatePaymentRows(payments) {
    return payments
      .map(
        (payment) => `
        <tr>
          <td style="padding: 8px; border-bottom: 1px solid ${
            PDF_BRAND_THEME.borderColor
          };">
            ${payment.doctorName || payment.doctor?.name || "Unknown Doctor"}
          </td>
          <td style="padding: 8px; border-bottom: 1px solid ${
            PDF_BRAND_THEME.borderColor
          };">
            ${
              payment.doctorSpecialization ||
              payment.doctor?.specialization ||
              "General"
            }
          </td>
          <td style="padding: 8px; border-bottom: 1px solid ${
            PDF_BRAND_THEME.borderColor
          };">
            ${PDFFormatUtils.formatCurrency(payment.amount)}
          </td>
          <td style="padding: 8px; border-bottom: 1px solid ${
            PDF_BRAND_THEME.borderColor
          };">
            <span style="padding: 4px 8px; border-radius: 4px; font-size: 12px; background: ${PDFStatusUtils.getStatusBackgroundColor(
              payment.status
            )}; color: ${PDFStatusUtils.getStatusTextColor(payment.status)};">
              ${
                (payment.status || "Unknown").charAt(0).toUpperCase() +
                (payment.status || "Unknown").slice(1)
              }
            </span>
          </td>
          <td style="padding: 8px; border-bottom: 1px solid ${
            PDF_BRAND_THEME.borderColor
          };">
            ${PDFFormatUtils.formatDate(payment.date || payment.created)}
          </td>
          <td style="padding: 8px; border-bottom: 1px solid ${
            PDF_BRAND_THEME.borderColor
          }; font-size: 12px;">
            ${payment.id || payment.paymentId || "N/A"}
          </td>
        </tr>
      `
      )
      .join("");
  }

  /**
   * Generate filter section if filters are applied
   * @param {Object} filters - Applied filters
   * @returns {string} HTML filter section
   */
  static _generateFilterSection(filters) {
    const hasFilters =
      filters.searchTerm ||
      (filters.statusFilter && filters.statusFilter !== "all") ||
      filters.dateRange ||
      filters.startDate ||
      filters.endDate ||
      filters.selectedDate;

    if (!hasFilters) {
      return "";
    }

    return `
      <p><strong>Applied Filters:</strong></p>
      <ul>
        ${filters.searchTerm ? `<li>Search: "${filters.searchTerm}"</li>` : ""}
        ${
          filters.statusFilter && filters.statusFilter !== "all"
            ? `<li>Status: ${
                filters.statusFilter.charAt(0).toUpperCase() +
                filters.statusFilter.slice(1)
              }</li>`
            : ""
        }
        ${this._generateDateFilterSection(filters)}
      </ul>
    `;
  }

  /**
   * Generate date filter section
   * @param {Object} filters - Applied filters
   * @returns {string} HTML date filter section
   */
  static _generateDateFilterSection(filters) {
    let dateFilterHtml = "";

    // Handle preset date range (e.g., "Last 30 days", "This month")
    if (filters.dateRange && filters.dateRange !== "all") {
      dateFilterHtml += `<li>Date Range: ${filters.dateRange}</li>`;
    }

    // Handle custom date range (start and end dates)
    else if (filters.startDate && filters.endDate) {
      const startDate = PDFFormatUtils.formatDate(filters.startDate);
      const endDate = PDFFormatUtils.formatDate(filters.endDate);
      dateFilterHtml += `<li>Date Range: ${startDate} to ${endDate}</li>`;
    }

    // Handle single date selection
    else if (filters.selectedDate) {
      const selectedDate = PDFFormatUtils.formatDate(filters.selectedDate);
      dateFilterHtml += `<li>Date: ${selectedDate}</li>`;
    }

    // Handle individual start or end date (partial range)
    else if (filters.startDate) {
      const startDate = PDFFormatUtils.formatDate(filters.startDate);
      dateFilterHtml += `<li>From Date: ${startDate}</li>`;
    } else if (filters.endDate) {
      const endDate = PDFFormatUtils.formatDate(filters.endDate);
      dateFilterHtml += `<li>Until Date: ${endDate}</li>`;
    }

    return dateFilterHtml;
  }

  /**
   * Generate statistics section
   * @param {Object} stats - Payment statistics
   * @returns {string} HTML stats section
   */
  static _generateStatsSection(stats) {
    return `
      <div class="info-section">
        <h2>Payment Summary</h2>
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-number">${stats.total || 0}</div>
            <div class="stat-label">Total Payments</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">${stats.successful || 0}</div>
            <div class="stat-label">Successful</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">${stats.pending || 0}</div>
            <div class="stat-label">Pending</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">${stats.failed || 0}</div>
            <div class="stat-label">Failed</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">LKR ${(stats.totalAmount || 0).toFixed(
              2
            )}</div>
            <div class="stat-label">Total Amount</div>
          </div>
        </div>
      </div>
    `;
  }

  /**
   * Get CSS styles for payment history template
   * @returns {string} CSS styles
   */
  static _getStyles() {
    return `
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        color: ${PDF_BRAND_THEME.darkTextColor};
      }
      .header {
        background: ${PDF_BRAND_THEME.brandColor};
        color: white;
        padding: 20px;
        text-align: center;
      }
      .header h1 {
        margin: 0;
        font-size: 24px;
      }
      .content {
        padding: 20px;
      }
      .info-section {
        margin-bottom: 30px;
      }
      .info-section h2 {
        color: ${PDF_BRAND_THEME.darkTextColor};
        border-bottom: 2px solid ${PDF_BRAND_THEME.accentColor};
        padding-bottom: 5px;
      }
      .stats-grid {
        display: flex;
        justify-content: space-between;
        margin-bottom: 30px;
      }
      .stat-card {
        text-align: center;
        padding: 15px;
        background: ${PDF_BRAND_THEME.lightBrandColor};
        border-radius: 8px;
        min-width: 120px;
      }
      .stat-number {
        font-size: 24px;
        font-weight: bold;
        color: ${PDF_BRAND_THEME.brandColor};
      }
      .stat-label {
        font-size: 12px;
        color: ${PDF_BRAND_THEME.mutedTextColor};
      }
      table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
      }
      th {
        background: ${PDF_BRAND_THEME.brandColor};
        color: white;
        padding: 12px 8px;
        text-align: left;
        font-weight: bold;
      }
      td {
        padding: 8px;
        border-bottom: 1px solid ${PDF_BRAND_THEME.borderColor};
      }
      .footer {
        margin-top: 40px;
        text-align: center;
        color: ${PDF_BRAND_THEME.mutedTextColor};
        font-size: 12px;
        border-top: 1px solid ${PDF_BRAND_THEME.borderColor};
        padding-top: 20px;
      }
    `;
  }
}
